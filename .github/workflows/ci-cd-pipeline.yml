name: CI/CD Pipeline for MEAN Stack

env:
  CI: true
  NODE_OPTIONS: --max_old_space_size=4096

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend: Node + cache npm
      - name: Set up Node.js (backend)
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: |
            app/backend/package-lock.json

      # Frontend: Node + cache npm
      - name: Set up Node.js (frontend cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: |
            app/frontend/package-lock.json

      - name: Print versions
        run: |
          node -v
          npm -v
          docker -v
          docker compose version || true

      # ---------- Backend ----------
      - name: Install backend dependencies
        working-directory: ./app/backend
        run: npm ci

      - name: Run backend tests (Jest)
        working-directory: ./app/backend
        timeout-minutes: 10
        run: |
          if [ -f "package.json" ] && jq -re '.scripts.test? // empty' package.json > /dev/null; then
            echo "üß™ Running backend tests..."
            npm test -- --runInBand --testTimeout=20000 --coverage
          else
            echo "‚ö†Ô∏è No tests configured for backend"
          fi

      - name: Upload backend coverage to Codecov (if exists)
        uses: codecov/codecov-action@v4
        with:
          files: ./app/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        continue-on-error: true

      # ---------- Frontend ----------
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install frontend dependencies
        working-directory: ./app/frontend
        run: npm ci

      # Si no tienes tests, este step salta. Si los tienes, usamos ChromeHeadlessNoSandbox
      - name: Run frontend tests (Angular/Karma)
        working-directory: ./app/frontend
        timeout-minutes: 12
        env:
          CHROME_BIN: chrome
        run: |
          if [ -f "package.json" ] && jq -re '.scripts.test? // empty' package.json > /dev/null; then
            echo "üß™ Running frontend tests (Karma)..."
            # Si tu karma.conf tiene el launcher ChromeHeadlessNoSandbox:
            npm test -- --watch=false --browsers=ChromeHeadlessNoSandbox
          else
            echo "‚ö†Ô∏è No tests configured for frontend"
          fi

      - name: Build Angular application
        working-directory: ./app/frontend
        timeout-minutes: 12
        run: |
          if [ -f "package.json" ] && jq -re '.scripts.build? // empty' package.json > /dev/null; then
            npm run build -- --configuration=production
          else
            echo "‚ö†Ô∏è No build script in frontend"
          fi

      # ---------- Docker ----------
      - name: Docker info
        run: docker info

      - name: Test Docker Compose build
        timeout-minutes: 15
        run: |
          if docker compose version >/dev/null 2>&1; then
            docker compose build --pull
          elif command -v docker-compose >/dev/null 2>&1; then
            docker-compose build --pull
          else
            echo "‚ùå Neither 'docker compose' nor 'docker-compose' is available."
            exit 1
          fi
