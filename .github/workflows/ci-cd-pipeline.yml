name: CI/CD Pipeline for MEAN Stack

env:
  WAIT_ON_TIMEOUT: 300000

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Paso 1: Instalar dependencias del backend
      - name: Install backend dependencies
        working-directory: ./app/backend
        run: npm install

      # Paso 2: Ejecutar pruebas del backend (si existen)
      - name: Run backend tests
        working-directory: ./app/backend
        run: |
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test
          else
            echo "No tests configured for backend"
          fi

      # Paso 3: Instalar dependencias del frontend
      - name: Install frontend dependencies
        working-directory: ./app/frontend
        run: npm install

      # Paso 4: Ejecutar pruebas del frontend (si existen)
      - name: Run frontend tests
        working-directory: ./app/frontend
        run: |
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            # Instalar Chrome para pruebas
            sudo apt-get update
            sudo apt-get install -y libgbm-dev libxshmfence-dev
            
            # Ejecutar pruebas
            npm test -- --watch=false --browsers=ChromeHeadless
          else
            echo "No tests configured for frontend"
          fi

      # Paso 5: Construir la aplicaci√≥n Angular
      - name: Build Angular application
        working-directory: ./app/frontend
        run: npm run build -- --configuration=production

      # Paso 6: Test de Docker Compose
      - name: Test Docker Compose build
        run: docker-compose build

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend Docker image
        working-directory: ./app/backend
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/meraki-backend:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/meraki-backend:latest

      - name: Build and push frontend Docker image
        run: |
          docker build -f ./app/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/meraki-frontend:latest ./app
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/meraki-frontend:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_SERVER_HOST }}
          username: ${{ secrets.STAGING_SERVER_USER }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          script: |
            cd /opt/meraki
            git pull origin develop
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker system prune -f

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.PRODUCTION_SERVER_USER }}
          key: ${{ secrets.PRODUCTION_SERVER_SSH_KEY }}
          script: |
            cd /opt/meraki
            git pull origin main
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker system prune -f
